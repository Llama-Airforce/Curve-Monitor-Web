const u=t=>{const n=new URLSearchParams(Object.entries(t).filter(([e,r])=>r!=null).map(([e,r])=>[e,r.toString()])).toString();return n&&`?${n}`};class o extends Error{constructor(n,e){super(e),this.status=n}}async function s(t,n,e){const r=await fetch(t,{method:n?"POST":"GET",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(n),signal:e});if(!r.ok)throw new o(r.status,`Fetch error ${r.status} for URL: ${t}`);return r}async function f(t,n,e){return await(await s(t,n,e)).json()}const a=/[+-]\d{2}:?\d{2}$/;function h(t){if(typeof t=="number")return new Date(t*1e3);const n=Number(t);if(!Number.isNaN(n))return new Date(n*1e3);const r=t.endsWith("Z")||a.test(t)?t:`${t}Z`;return new Date(r)}const c=24*60*60;function w({end:t,start:n,daysRange:e=10}={}){return t??=Math.floor(Date.now()/1e3),n??=t-e*c,{end:t,start:n}}export{u as a,f,w as g,h as t};
